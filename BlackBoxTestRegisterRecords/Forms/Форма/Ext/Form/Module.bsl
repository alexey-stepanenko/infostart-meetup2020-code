#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыСоЗначениями;

&НаКлиенте
Перем ПараметрыБезЗначений;

&НаКлиенте
Перем ЛогРаботыОбработки;

&НаКлиенте
Перем ЕстьОшибки;

&НаКлиенте
Перем ФильтрДиалогаВыбораФайлаНастроек;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.АвтоматическийРежим = Ложь;
	АдресЛогаПерепроведения = ПоместитьВоВременноеХранилище(Неопределено, ЭтаФорма.УникальныйИдентификатор);
	АдресВыгрузкиДвижений = ПоместитьВоВременноеХранилище(Неопределено, ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗаполнитьИменаПараметров();
	//ОбработатьПараметрыЗапуска();
	
	Если Объект.АвтоматическийРежим Тогда
	
		ЗапуститьНаКлиенте();
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КаталогВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.ПолноеИмяФайла = Объект.КаталогВыгрузки;
	Диалог.Показать(Новый ОписаниеОповещения("КаталогВыгрузкиНачалоВыбораЗавершение", ЭтотОбъект));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Запросы

&НаКлиенте
Процедура ЗапросыТекстЗапросаВыборкиРегистраторовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОткрытьКонструкторЗапроса("ТекстЗапросаВыборкиРегистраторов");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапросыТекстЗапросаВыборкиДвиженийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОткрытьКонструкторЗапроса("ТекстЗапросаВыборкиДвижений");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗагрузитьНастройки(Команда)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Фильтр = ФильтрДиалогаВыбораФайлаНастроек;
	Диалог.Показать(Новый ОписаниеОповещения("ЗагрузитьНастройкиЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройки(Команда)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.Фильтр = ФильтрДиалогаВыбораФайлаНастроек;
	Диалог.Показать(Новый ОписаниеОповещения("СохранитьНастройкиЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура Запустить(Команда)
	
	ЗапуститьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПериод(Команда)
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период.ДатаНачала = Объект.ПериодНачало;
	Диалог.Период.ДатаОкончания = Объект.ПериодОкончание;
	
	Диалог.Показать(Новый ОписаниеОповещения("УстановитьПериодЗавершение", ЭтотОбъект));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РедактированиеТекстовЗапросов

&НаКлиенте
Процедура ОткрытьКонструкторЗапроса(ВидЗапроса)

	ТекущиеДанные = Элементы.Запросы.ТекущиеДанные;
	
	КонструкторЗапроса = Новый КонструкторЗапроса;
	КонструкторЗапроса.Текст = ТекущиеДанные[ВидЗапроса];
	КонструкторЗапроса.Показать(Новый ОписаниеОповещения(
	  "ОткрытьКонструкторЗапросаЗавершение",
	  ЭтотОбъект,
	  ВидЗапроса
	));

КонецПроцедуры // ОткрытьКонструкторЗапроса()

&НаКлиенте
Процедура ОткрытьКонструкторЗапросаЗавершение(Текст, ДополнительныеПараметры) Экспорт

	Если Текст = Неопределено Тогда
	
		Возврат;
	
	КонецЕсли;

	ТекущиеДанные = Элементы.Запросы.ТекущиеДанные;
	ТекущиеДанные[ДополнительныеПараметры] = Текст;
	
КонецПроцедуры // ОткрытьКонструкторЗапросаЗавершение()

#КонецОбласти

#Область ПараметрыЗапускаОбработки
	
&НаКлиенте
Процедура ЗаполнитьИменаПараметров()

	ПараметрыСоЗначениями = Новый Массив;
	ПараметрыСоЗначениями.Добавить("ПериодНачало");
	ПараметрыСоЗначениями.Добавить("ПериодОкончание");
	ПараметрыСоЗначениями.Добавить("КаталогВыгрузки");
	
	ПараметрыБезЗначений = Новый Массив;
	ПараметрыБезЗначений.Добавить("ПерепроводитьДокументы");
	ПараметрыБезЗначений.Добавить("ВыгружатьДвижения");
	ПараметрыБезЗначений.Добавить("АвтоматическийРежим");

КонецПроцедуры // ЗаполнитьИменаПараметров()

&НаКлиенте
Процедура ОбработатьПараметрыЗапуска()

	ПараметрыЗапускаОбработки = СтрРазделить(ПараметрЗапуска, " 	");
	Для Каждого Элемент Из ПараметрыЗапускаОбработки Цикл
	
		ОбработатьПараметрЗапуска(Элемент);
	
	КонецЦикла;

КонецПроцедуры // ОбработатьПараметрыЗапуска()

&НаКлиенте
Процедура ОбработатьПараметрЗапуска(ПараметрЗапускаОбработки)

	ПозицияРазделителя = СтрНайти(ПараметрЗапускаОбработки, "=");
	
	Если ПозицияРазделителя = 0 Тогда
	
		ОбработатьПараметрЗапускаБезЗначения(ПараметрЗапускаОбработки);
	
	Иначе
		
		ИмяПараметраЗапуска = Лев(ПараметрЗапускаОбработки, ПозицияРазделителя - 1);
		ЗначениеПараметраЗапуска = Прав(ПараметрЗапускаОбработки, СтрДлина(ПараметрЗапускаОбработки) - ПозицияРазделителя);
		ОбработатьПараметрЗапускаСоЗначением(ИмяПараметраЗапуска, ЗначениеПараметраЗапуска);
	
	КонецЕсли;
	
КонецПроцедуры // ОбработатьПараметрЗапуска()

&НаКлиенте
Процедура ОбработатьПараметрЗапускаБезЗначения(ПараметрЗапускаОбработки)

	Если ПараметрыБезЗначений.Найти(ПараметрЗапускаОбработки) = Неопределено Тогда
	
		Возврат;
	
	КонецЕсли;
	
	Объект[ПараметрЗапускаОбработки] = Истина;

КонецПроцедуры // ОбработатьПараметрЗапускаБезЗначения()

&НаКлиенте
Процедура ОбработатьПараметрЗапускаСоЗначением(ИмяПараметраЗапуска, ЗначениеПараметраЗапуска)

	Если ПараметрыСоЗначениями.Найти(ИмяПараметраЗапуска) = Неопределено Тогда
	
		Возврат;
	
	КонецЕсли;
	
	Если ИмяПараметраЗапуска = "КаталогВыгрузки" Тогда
		
		ОбработатьПараметрЗапускаСтрока(ИмяПараметраЗапуска, ЗначениеПараметраЗапуска);
		
	Иначе
		
		ОбработатьПараметрЗапускаДата(ИмяПараметраЗапуска, ЗначениеПараметраЗапуска);
		
	КонецЕсли; 

КонецПроцедуры // ОбработатьПараметрЗапускаСоЗначением()

&НаКлиенте
Процедура ОбработатьПараметрЗапускаСтрока(ИмяПараметраЗапуска, ЗначениеПараметраЗапуска)

	Объект[ИмяПараметраЗапуска] = ЗначениеПараметраЗапуска;

КонецПроцедуры // ОбработатьПараметрЗапускаСтрока()

&НаКлиенте
Процедура ОбработатьПараметрЗапускаДата(ИмяПараметраЗапуска, ЗначениеПараметраЗапуска)

	ТипДата = Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	Объект[ИмяПараметраЗапуска] = ТипДата.ПривестиЗначение(ЗначениеПараметраЗапуска);

КонецПроцедуры // ОбработатьПараметрЗапускаДата()

&НаКлиенте
Процедура ПроверитьПараметрыРаботыОбработки()

	СтрокиЛога = Новый Массив;
	ЕстьОшибки = Ложь;
	
	ПроверитьДату("ПериодНачало", "начало периода", СтрокиЛога);
	ПроверитьДату("ПериодОкончание", "окончание периода", СтрокиЛога);
	ПроверитьДаты(СтрокиЛога);
	ПроверитьРежим(СтрокиЛога);
	
	Файл = Новый Файл(Объект.КаталогВыгрузки);
	Файл.НачатьПроверкуСуществования(Новый ОписаниеОповещения(
	  "ПроверкаСуществованияКаталогаВыгрузкиЗавершение", 
	  ЭтотОбъект,
	  СтрокиЛога
	));
	// ПроверитьЗапросы();

КонецПроцедуры // ПроверитьПараметрыРаботыОбработки()

&НаКлиенте
Процедура ПроверкаСуществованияКаталогаВыгрузкиЗавершение(Существует, ДополнительныеПараметры) Экспорт

	Если Не Существует Тогда
	
		ОбработатьТекстОшибки(
		  "Каталог выгрузки не существует",
		  "КаталогВыгрузки",
		  ДополнительныеПараметры
		);
		
		ВывестиЛогРаботы(ДополнительныеПараметры);
		
		Возврат;
	
	КонецЕсли; 

	Файл = Новый Файл(Объект.КаталогВыгрузки);
	Файл.НачатьПроверкуЭтоКаталог(Новый ОписаниеОповещения("ПроверитьПараметрыРаботыОбработкиПродолжение", ЭтотОбъект));
КонецПроцедуры // ПроверкаСуществованияКаталогаВыгрузкиЗавершение()

&НаКлиенте
Процедура ПроверитьПараметрыРаботыОбработкиПродолжение(ЭтоКаталог, ДополнительныеПараметры) Экспорт

	ПроверитьКаталог(ЭтоКаталог, ДополнительныеПараметры);
	
	Если ЕстьОшибки Тогда
		
		ВывестиЛогРаботы(ДополнительныеПараметры);
		
		Возврат;
		
	КонецЕсли;

	ЗапуститьНаСервере();
	ЗаписатьЛогиРаботыНаКлиенте();
	
КонецПроцедуры // ПроверитьПараметрыРаботыОбработкиПродолжение()

&НаКлиенте
Процедура ВывестиЛогРаботы(СтрокиЛога)

	Если Не Объект.АвтоматическийРежим Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Лог = Новый ЗаписьТекста(ЛогРаботыОбработки, КодировкаТекста.UTF8, , Истина);
	
	Для Каждого СтрокаЛога Из СтрокиЛога Цикл
	
		Лог.ЗаписатьСтроку(СтрокаЛога);
	
	КонецЦикла;
	
	Лог.Закрыть();

КонецПроцедуры // ВывестиЛогРаботы()

&НаКлиенте
Процедура ОбработатьТекстОшибки(ТекстОшибки, ИмяРеквизита = Неопределено, СтрокиЛога = Неопределено)

	ЕстьОшибки = Истина;
	Если Объект.АвтоматическийРежим И СтрокиЛога <> Неопределено Тогда
	
		СтрокиЛога.Добавить(ТекстОшибки);
	
	Иначе
	
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстОшибки;
		Если ИмяРеквизита <> Неопределено Тогда
			Сообщение.Поле = "Объект." + ИмяРеквизита;
		КонецЕсли;
		Сообщение.Сообщить();
	
	КонецЕсли;

КонецПроцедуры // ОбработатьСтрокуОшибки()

&НаКлиенте
Процедура ПроверитьДату(ИмяПроверяемогоРеквизита, Описание, СтрокиЛога)

	Если Объект[ИмяПроверяемогоРеквизита] > '00010101' Тогда
	
		Возврат;
	
	КонецЕсли;
	
	ТекстОшибки = СтрШаблон("Не установлено %1", Описание);
	ОбработатьТекстОшибки(ТекстОшибки, ИмяПроверяемогоРеквизита, СтрокиЛога);
	
КонецПроцедуры // ПроверитьДату()

&НаКлиенте
Процедура ПроверитьДаты(СтрокиЛога)

	Если 
		Объект.ПериодНачало > '00010101' 
		И Объект.ПериодОкончание > '00010101' 
		И Объект.ПериодНачало > Объект.ПериодОкончание 
	Тогда
	
		ОбработатьТекстОшибки(
		  "Начало периода должно быть меньше окончания",
		  "ПериодНачало",
		  СтрокиЛога
		);
	
	КонецЕсли;

КонецПроцедуры // ПроверитьДаты()

&НаКлиенте
Процедура ПроверитьКаталог(ЭтоКаталог, СтрокиЛога)

	Если ЭтоКаталог Тогда
	
		ЛогРаботыОбработки = Объект.КаталогВыгрузки + ПолучитьРазделительПутиКлиента() + "log.log";
		ОчиститьКаталогВыгрузки();
	
	Иначе
	
		ЛогРаботыОбработки = КаталогДокументов() + ПолучитьРазделительПутиКлиента() + "log.log";
		ОбработатьТекстОшибки(
		  "Каталог выгрузки не существует",
		  "Объект.КаталогВыгрузки",
		  СтрокиЛога
		);
	
	КонецЕсли;

КонецПроцедуры // ПроверитьКаталог()

&НаКлиенте
Процедура ОчиститьКаталогВыгрузки()

	

КонецПроцедуры // ОчиститьКаталогВыгрузки()

&НаКлиенте
Процедура ПроверитьРежим(СтрокиЛога)

	Если
		
		Объект.ПерепроводитьДокументы
		Или Объект.ВыгружатьДвижения
		
	Тогда
	
		Возврат;
	
	КонецЕсли;
	
	ОбработатьТекстОшибки("Не установлен режим работы", "ПерепроводитьДокументы", СтрокиЛога);

КонецПроцедуры // ПроверитьРежим()

#КонецОбласти 

#Область Настройки

&НаКлиенте
Процедура СохранитьНастройкиЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт 

	Если ВыбранныеФайлы = Неопределено Тогда
	
		Возврат;
	
	КонецЕсли;
	
	МассивЗапросов = Новый Массив;
	Для Каждого СтрокаТаблицы Из Объект.Запросы Цикл
	
		ОписаниеСтроки = Новый Структура;
		ОписаниеСтроки.Вставить("ФлагВыбора", СтрокаТаблицы.ФлагВыбора);
		ОписаниеСтроки.Вставить("Идентификатор", СтрокаТаблицы.Идентификатор);
		ОписаниеСтроки.Вставить("ТекстЗапросаВыборкиРегистраторов", СтрокаТаблицы.ТекстЗапросаВыборкиРегистраторов);
		ОписаниеСтроки.Вставить("ТекстЗапросаВыборкиДвижений", СтрокаТаблицы.ТекстЗапросаВыборкиДвижений);
		
		МассивЗапросов.Добавить(ОписаниеСтроки);
	
	КонецЦикла; 
	
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("ПериодНачало", Объект.ПериодНачало);
	СтруктураНастройки.Вставить("ПериодОкончание", Объект.ПериодОкончание);
	СтруктураНастройки.Вставить("ПерепроводитьДокументы", Объект.ПерепроводитьДокументы);
	СтруктураНастройки.Вставить("ВыгружатьДвижения", Объект.ВыгружатьДвижения);
	СтруктураНастройки.Вставить("КаталогВыгрузки", Объект.КаталогВыгрузки);
	СтруктураНастройки.Вставить("Запросы", МассивЗапросов);
	
	НастройкиСериализации = Новый НастройкиСериализацииJSON;
	НастройкиСериализации.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.УниверсальнаяДата;
	НастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	//ЗаписьJSON.УстановитьСтроку();
	ЗаписьJSON.ОткрытьФайл(ВыбранныеФайлы[0]);
	ЗаписатьJSON(ЗаписьJSON, СтруктураНастройки, НастройкиСериализации);
	ЗаписьJSON.Закрыть();

КонецПроцедуры // СохранитьНастройкиЗавершение()
	
&НаКлиенте
Процедура ЗагрузитьНастройкиЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт 

	Если ВыбранныеФайлы = Неопределено Тогда
	
		Возврат;
	
	КонецЕсли;
	
	ЗагрузитьНастройкиИзФайла(ВыбранныеФайлы[0], Неопределено);

КонецПроцедуры // ЗагрузитьНастройкиЗавершение()

&НаКлиенте
Процедура ЗагрузитьНастройкиИзФайла(ПутьКФайлуНастроек, СтрокиЛога = Неопределено)

	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.ОткрытьФайл(ПутьКФайлуНастроек);
	
	РеквизитыСДатой = Новый Массив;
	РеквизитыСДатой.Добавить("ПериодНачало");
	РеквизитыСДатой.Добавить("ПериодОкончание");
	
	Попытка
	
		Настройки = ПрочитатьJSON(ЧтениеJSON, Истина, РеквизитыСДатой, ФорматДатыJSON.ISO);
	
	Исключение
		
		ОбработатьТекстОшибки(ОписаниеОшибки(), Неопределено, СтрокиЛога);
	
	КонецПопытки;
	
	ЧтениеJSON.Закрыть();
	
	УстановитьЗначениеНастройки(Настройки, "ПериодНачало", "ПериодНачало");
	УстановитьЗначениеНастройки(Настройки, "ПериодОкончание", "ПериодОкончание");
	УстановитьЗначениеНастройки(Настройки, "ПерепроводитьДокументы", "ПерепроводитьДокументы");
	УстановитьЗначениеНастройки(Настройки, "ВыгружатьДвижения", "ВыгружатьДвижения");
	УстановитьЗначениеНастройки(Настройки, "КаталогВыгрузки", "КаталогВыгрузки");
	УстановитьЗначениеНастройкиЗапросы(Настройки);

КонецПроцедуры // ЗагрузитьНастройкиИзФайла()

&НаКлиенте
Процедура УстановитьЗначениеНастройки(Настройки, ИмяПараметра, ИмяРеквизита)

	ЗначениеПараметра = Настройки.Получить(ИмяПараметра);
	
	Если ЗначениеПараметра = Неопределено Тогда
	
		Возврат;
		
	КонецЕсли;
	
	Объект[ИмяРеквизита] = ЗначениеПараметра;

КонецПроцедуры // УстановитьЗначениеНастройки()

&НаКлиенте
Процедура УстановитьЗначениеНастройкиЗапросы(Настройки)

	МассивЗапросов = Настройки.Получить("Запросы");
	
	Если 
		МассивЗапросов = Неопределено 
		Или ТипЗнч(МассивЗапросов) <> Тип("Массив")
	Тогда
	
		Возврат;
	
	КонецЕсли;
	
	Объект.Запросы.Очистить();
	
	Для Каждого Элемент Из МассивЗапросов Цикл
	
		НоваяСтрока = Объект.Запросы.Добавить();
		УстановитьЗначениеНастройкиЗапроса(НоваяСтрока, Элемент, "ФлагВыбора", "ФлагВыбора");
		УстановитьЗначениеНастройкиЗапроса(НоваяСтрока, Элемент, "Идентификатор", "Идентификатор");
		УстановитьЗначениеНастройкиЗапроса(НоваяСтрока, Элемент, "ТекстЗапросаВыборкиРегистраторов", "ТекстЗапросаВыборкиРегистраторов");
		УстановитьЗначениеНастройкиЗапроса(НоваяСтрока, Элемент, "ТекстЗапросаВыборкиДвижений", "ТекстЗапросаВыборкиДвижений");
	
	КонецЦикла; 

КонецПроцедуры // УстановитьЗначениеНастройкиЗапросы()

&НаКлиенте
Процедура УстановитьЗначениеНастройкиЗапроса(СтрокаЗапроса, НастройкаЗапроса, ИмяПараметра, ИмяРеквизита)

	ЗначениеПараметра = НастройкаЗапроса.Получить(ИмяПараметра);
	
	Если ЗначениеПараметра = Неопределено Тогда
	
		Возврат;
	
	КонецЕсли;
	
	СтрокаЗапроса[ИмяРеквизита] = ЗначениеПараметра;

КонецПроцедуры // УстановитьЗначениеНастройкиЗапроса()
	
#КонецОбласти

&НаКлиенте
Процедура ЗапуститьНаКлиенте()

	ПроверитьПараметрыРаботыОбработки();

КонецПроцедуры // ЗапуститьНаКлиенте()

&НаКлиенте
Процедура УстановитьПериодЗавершение(Период, ДополнительныеПараметры) Экспорт

	Если Период = Неопределено Тогда
	
		Возврат;
	
	КонецЕсли;
	
	Объект.ПериодНачало = Период.ДатаНачала;
	Объект.ПериодОкончание = Период.ДатаОкончания;

КонецПроцедуры // УстановитьПериодЗавершение()

&НаКлиенте
Процедура КаталогВыгрузкиНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт 
	
	Если ВыбранныеФайлы = Неопределено Тогда
	
		Возврат;
	
	КонецЕсли;
	
	Объект.КаталогВыгрузки = ВыбранныеФайлы[0];

КонецПроцедуры // КаталогВыгрузкиНачалоВыбораЗавершение()

&НаСервере
Процедура ЗапуститьНаСервере()

	//ПодготовитьТекстыЗапросов();
	ПерепровестиДокументы();
	ВыгрузитьДвижения();

КонецПроцедуры // ЗапуститьНаСервере()

&НаСервере
Процедура ПерепровестиДокументы()
	
	Если Не Объект.ПерепроводитьДокументы Тогда
	
		Возврат;
	
	КонецЕсли; 

	ИмяКаталога = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(ИмяКаталога);
	ИмяФайлаЛога = ИмяКаталога + ПолучитьРазделительПутиСервера() + "Перепроведение.log";
	ЛогПерепроведения = Новый ЗаписьТекста(ИмяФайлаЛога, КодировкаТекста.UTF8);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаВыборкиДокументовДляПерепроведения();
	Запрос.УстановитьПараметр("ПериодНачало", Объект.ПериодНачало);
	Запрос.УстановитьПараметр("ПериодОкончание", Объект.ПериодОкончание);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	РезультатПерепроведения = "";
	Пока Выборка.Следующий() Цикл
	
		Регистратор = Выборка.Регистратор.ПолучитьОбъект();
		Шаблон = СтрШаблон(
		  "Проведение документа %1 (%2): ", 
		  Выборка.Представление,
		  Выборка.Регистратор.УникальныйИдентификатор()
		) + "%1";
		
		Попытка
		
			Регистратор.Записать(РежимЗаписиДокумента.Проведение);
			ЛогПерепроведения.ЗаписатьСтроку(СтрШаблон(Шаблон, "Успешно"));
		
		Исключение
		
			ЛогПерепроведения.ЗаписатьСтроку(СтрШаблон(Шаблон, "Ошибка"));
			ЛогПерепроведения.ЗаписатьСтроку(ОписаниеОшибки());
			
		КонецПопытки;
	
	КонецЦикла;
	
	ЛогПерепроведения.Закрыть();
	
	Архив = Новый ЗаписьZipФайла();
	Архив.Добавить(ИмяФайлаЛога);
	ДвоичныеДанные = Архив.ПолучитьДвоичныеДанные(, , МетодСжатияZIP.Сжатие, УровеньСжатияZIP.Максимальный);
	ПоместитьВоВременноеХранилище(ДвоичныеДанные, АдресЛогаПерепроведения);
	
	УдалитьФайлы(ИмяКаталога);

КонецПроцедуры // ПерепровестиДокументы()

&НаСервере
Процедура ВыгрузитьДвижения()

	Если Не Объект.ВыгружатьДвижения Тогда
	
		Возврат;
	
	КонецЕсли;
	
	РезультатыВыгрузки = Новый Массив;
	
	ИмяКаталога = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(ИмяКаталога);
	Для Каждого Элемент Из Объект.Запросы Цикл
	
		Если Не Элемент.ФлагВыбора Тогда
		
			Продолжить;
		
		КонецЕсли;
		
		ИмяФайлаРезультатВыгрузки = ИмяКаталога + ПолучитьРазделительПутиСервера() + Элемент.Идентификатор + ".txt";
		РезультатВыгрузки = Новый ЗаписьТекста(ИмяФайлаРезультатВыгрузки, КодировкаТекста.UTF8);
		
		Запрос = Новый Запрос;
		Запрос.Текст = Элемент.ТекстЗапросаВыборкиДвижений;
		Запрос.УстановитьПараметр("ПериодНачало", Объект.ПериодНачало);
		Запрос.УстановитьПараметр("ПериодОкончание", Объект.ПериодОкончание);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Движение = Новый Массив;
			
			Для Сч = 0 По 100 Цикл
			
				Попытка
				
					РеквизитДвижения = Выборка.Получить(Сч);
				
				Исключение
					
					Прервать;
				
				КонецПопытки;
				
				Движение.Добавить(РеквизитДвижения);
			
			КонецЦикла; 
			
			РезультатВыгрузки.ЗаписатьСтроку(СтрСоединить(Движение, ";"));
			
		КонецЦикла;
		
		РезультатВыгрузки.Закрыть();
		РезультатыВыгрузки.Добавить(ИмяФайлаРезультатВыгрузки);
		
	КонецЦикла;

	Архив = Новый ЗаписьZipФайла();
	
	Для Каждого Элемент Из РезультатыВыгрузки Цикл
	
		Архив.Добавить(Элемент);
	
	КонецЦикла;
	
	ДвоичныеДанные = Архив.ПолучитьДвоичныеДанные(, , МетодСжатияZIP.Сжатие, УровеньСжатияZIP.Максимальный);
	ПоместитьВоВременноеХранилище(ДвоичныеДанные, АдресВыгрузкиДвижений);
	
	УдалитьФайлы(ИмяКаталога);
	
КонецПроцедуры // ВыгрузитьДвижения()

#Область ТекстыЗапросов
	
&НаСервере
Функция ПолучитьТекстЗапросаВыборкиДокументовДляПерепроведения()
	
	РезультатФункции = "";
	
	МассивЗапросов = Объект.Запросы.Выгрузить(
	  Новый Структура("ФлагВыбора", Истина),
	  "ТекстЗапросаВыборкиРегистраторов"
	).ВыгрузитьКолонку("ТекстЗапросаВыборкиРегистраторов");
	
	РезультатФункции = СтрСоединить(МассивЗапросов, " ОБЪЕДИНИТЬ ");

	//РезультатФункции = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	//                   |	Хозрасчетный.Регистратор КАК Регистратор,
	//                   |	ПРЕДСТАВЛЕНИЕ(Хозрасчетный.Регистратор) КАК Представление,
	//                   |	Хозрасчетный.МоментВремени КАК МоментВремени
	//                   |ИЗ
	//                   |	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	//                   |ГДЕ
	//                   |	Хозрасчетный.Период МЕЖДУ &ПериодНачало И &ПериодОкончание
	//                   |
	//                   |УПОРЯДОЧИТЬ ПО
	//                   |	МоментВремени";
	
	Возврат РезультатФункции;

КонецФункции // ПолучитьТекстЗапросаВыборкиДокументовДляПерепроведения()

&НаСервере
Функция ПолучитьТекстЗапросаВыборкиДвижений()

	РезультатФункции = "";
	
	Возврат РезультатФункции;

КонецФункции // ПолучитьТекстЗапросаВыборкиДвижений()

#КонецОбласти

&НаКлиенте
Процедура ЗаписатьЛогиРаботыНаКлиенте()

	Если Объект.ПерепроводитьДокументы Тогда
		
		ЗаписатьЛогРаботыНаКлиенте(АдресЛогаПерепроведения, "Перепроведение");
	
	КонецЕсли; 
	
	Если Объект.ВыгружатьДвижения Тогда
	
		ЗаписатьЛогРаботыНаКлиенте(АдресВыгрузкиДвижений, "ВыгрузкаДвижений");
		
	КонецЕсли;

КонецПроцедуры // ЗаписатьЛогиРаботыНаКлиенте()

&НаКлиенте
Процедура ЗаписатьЛогРаботыНаКлиенте(АдресВременногоХранилища, ИмяФайла)

	ПараметрыРаспаковки = Новый Структура(
	  "ИмяФайла, Путь",
	  Объект.КаталогВыгрузки + ПолучитьРазделительПутиКлиента() + ИмяФайла + ".zip",
	  Объект.КаталогВыгрузки
	);
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	ДвоичныеДанные.НачатьЗапись(
	Новый ОписаниеОповещения("ПослеЗагрузкиЛогаРаботыНаКлиент", ЭтотОбъект, ПараметрыРаспаковки), 
	ПараметрыРаспаковки.ИмяФайла
	);

КонецПроцедуры // ЗаписатьЛогРаботыНаКлиенте()

&НаКлиенте
Процедура ПослеЗагрузкиЛогаРаботыНаКлиент(ДополнительныеПараметры) Экспорт

	ЧтениеZipФайла = Новый ЧтениеZipФайла(ДополнительныеПараметры.ИмяФайла);
	ЧтениеZipФайла.ИзвлечьВсе(ДополнительныеПараметры.Путь);
	НачатьУдалениеФайлов(, ДополнительныеПараметры.ИмяФайла);

КонецПроцедуры // ПослеЗагрузкиЛогаРаботыНаКлиент()

&НаКлиенте
Процедура ПослеЗагрузкиВыгрузкиДвиженийНаКлиент(ДополнительныеПараметры) Экспорт

	

КонецПроцедуры // ПослеЗагрузкиВыгрузкиДвиженийНаКлиент()

&НаКлиенте
Процедура ЗапросыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	// Вставить содержимое обработчика.
КонецПроцедуры

#КонецОбласти

ФильтрДиалогаВыбораФайлаНастроек = "JSON-файлы (*.json)|*.json|Текстовые файлы (*.txt)|*.txt|Все файлы (*.*)|*.*";

